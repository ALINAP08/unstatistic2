{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "unstatisticdatafactapark"
		},
		"FileServer1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'FileServer1'"
		},
		"localsqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'localsqldb'"
		},
		"unstatisticdbaparklinkedservice_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'unstatisticdbaparklinkedservice'"
		},
		"unstatisticuploadapp_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'unstatisticuploadapp'"
		},
		"AzureSqlDatabase_keyvault_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "unstatisticserverapark-key-connection"
		},
		"FileServer1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\Task_7"
		},
		"FileServer1_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "unstatisticadminapark"
		},
		"testkeyAzureSqlDatabase_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().secretkey"
		},
		"unstatistic_key_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://unstatistickeyvault.vault.azure.net/"
		},
		"lnk_synd_poc_dev_sql2_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().pram_gbl_secret_key"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ETL process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Bulk Insert",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Files on the folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "first_Bulk_insert",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline Transform ATB",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Bulk Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "second_Transform_Atb",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline Transform TXNS_CHGS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Bulk Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "third_Transform_TXNS_CHGS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Cleaning cfgSubmissionInfo table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Transform ATB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Pipeline Transform TXNS_CHGS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM [dbo].[cfgSubmissionInfo] "
								}
							]
						}
					},
					{
						"name": "Send mail about Successed 1",
						"description": "Send mail about Successed ETL Process.",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Cleaning cfgSubmissionInfo table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL Process was Succeed.  This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Failed 2",
						"description": "Send mail about Failed ETL Process for TXNS_CHGS.",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Transform TXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\"message\":ETL Process was Failed for TXNS_CHGS. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\"dataFactoryName\":\"@{pipeline().DataFactory}\",\"pipelineName\":\"@{pipeline().Pipeline}\",\"receiver\":\"@{pipeline().parameters.receiver}\"}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup after loading",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Send mail about Successed 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_backup]",
							"storedProcedureParameters": {
								"Backup_path": {
									"value": "C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\",
									"type": "String"
								},
								"bakup_file": {
									"value": ",bak_1.bak,bak_2.bak,bak_3.bak",
									"type": "String"
								},
								"DB_name": {
									"value": "mfv40_AlinaParkhormenko",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Files on the folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "null_check_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send mail about Failed",
						"description": "Send mail about absent files on the folder",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Files on the folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Absent FILES on the folder. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Failed 3",
						"description": "Send mail about Failed ETL Process. for ATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Transform ATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\"message\":ETL Process was Failed for ATB. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\"dataFactoryName\":\"@{pipeline().DataFactory}\",\"pipelineName\":\"@{pipeline().Pipeline}\",\"receiver\":\"@{pipeline().parameters.receiver}\"}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "alina_parkhomenko@epam.com"
					}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/first_Bulk_insert')]",
				"[concat(variables('factoryId'), '/pipelines/second_Transform_Atb')]",
				"[concat(variables('factoryId'), '/pipelines/third_Transform_TXNS_CHGS')]",
				"[concat(variables('factoryId'), '/linkedServices/localsqldb')]",
				"[concat(variables('factoryId'), '/pipelines/null_check_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/First_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ov9",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ov9",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "dbo.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ov9",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ov9",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().destination.table"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "dicAdmitSource"
								},
								"destination": {
									"table": "dicAdmitSource"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicAgebyAdmitDate"
								},
								"destination": {
									"table": "dicAgebyAdmitDate"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Group1_ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "Group1_ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Group1",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Group1",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "MinValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MinValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "MaxValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MaxValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicAgebyDischargeDate"
								},
								"destination": {
									"table": "dicAgebyDischargeDate"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Group1_ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "Group1_ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Group1",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Group1",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "MinValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MinValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "MaxValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MaxValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicBillHold"
								},
								"destination": {
									"table": "dicBillHold"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicCoder"
								},
								"destination": {
									"table": "dicCoder"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_ov9')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_ov9')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/first_Bulk_insert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Send mail about Successed 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT *\nFROM [dbo].[cfgSubmissionInfo] \n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert to cfgSubmissionInfo",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH datefield AS (\nSELECT GETDATE()-1 AS PD,\n    FORMAT((GETDATE()-1), 'yyyyMMdd', 'en-us') AS PD_ID\n    )\n\nINSERT INTO [dbo].[cfgSubmissionInfo] ( \n        [FileHandle]\n        ,[PostDate]\n        ,[PostDate_ID]\n        ,[FormatFileName]\n        ,[FormatFilePath]\n        ,[TableName]\n        ,[RawFileName]\n        ,[FilePath]\n        ,[AmountColumn]\n        ,[FirstRows]\n    )\nSELECT \n    1 AS FileHandle,\n    PD AS PostDate,\n    PD_ID AS PostDate_ID,\n    'formatF_7.txt' AS FormatFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS FormatFilePath,\n    '_rawATB' AS TableName,\n    CONCAT('Account_',MONTH(PD),'.',DAY(PD),'.',YEAR(PD),'.txt') AS RawFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS rawFilePath,\n    'CurrentBalance' AS AmountColumn,\n    2 AS FirstRows\nFROM datefield\nUNION ALL\nSELECT \n    2 AS FileHandle,\n    PD AS PostDate,\n    PD_ID AS PostDate_ID  ,\n    'formatF_7_txn_chr.txt' AS  FormatFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS FormatFilePath,\n    '_rawTXNS_CHGS' AS TableName,\n    CONCAT('Transaction-Charge__',MONTH(PD),'.',DAY(PD),'.',YEAR(PD),'.txt') AS RawFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS rawFilePath,\n    'TxnAmount' AS AmountColumn,\n    2 AS FirstRows\nFROM datefield;\n\n"
								}
							]
						}
					},
					{
						"name": "Send mail about Successed 1",
						"description": "Send mail about Successed Insert to cfgSubmissionInfo and started ETL Process.",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert to cfgSubmissionInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL Process was started. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Fail 1",
						"description": "Send mail about Fail Insert to cfgSubmissionInfo",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert to cfgSubmissionInfo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "This object was added earlier. ETL process didn't start. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Fail 2",
						"description": "Send mail about \"Fail\" Bulk insert procedure for Atb data",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Bulk insert procedure for Atb data was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Bulk insert for",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_BULK]",
										"storedProcedureParameters": {
											"AmountColumn": {
												"value": {
													"value": "@item().AmountColumn",
													"type": "Expression"
												},
												"type": "String"
											},
											"Check_Existence": {
												"value": {
													"value": "@item().Check_Existence",
													"type": "Expression"
												},
												"type": "Byte[]"
											},
											"ClearTable": {
												"value": {
													"value": "@item().ClearTable",
													"type": "Expression"
												},
												"type": "Byte[]"
											},
											"FileHandle": {
												"value": {
													"value": "@item().FileHandle",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FirstRow": {
												"value": {
													"value": "@item().FirstRows",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"FormatFileName": {
												"value": {
													"value": "@item().FormatFileName",
													"type": "Expression"
												},
												"type": "String"
											},
											"FormatFilePath": {
												"value": {
													"value": "@item().FormatFilePath",
													"type": "Expression"
												},
												"type": "String"
											},
											"PostDate": {
												"value": {
													"value": "@item().PostDate",
													"type": "Expression"
												},
												"type": "String"
											},
											"RawFileName": {
												"value": {
													"value": "@item().RawFileName",
													"type": "Expression"
												},
												"type": "String"
											},
											"RawFilePath": {
												"value": {
													"value": "@item().FilePath",
													"type": "Expression"
												},
												"type": "String"
											},
											"RawTableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "localsqldb",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "alina_parkhomenko@epam.com"
					}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/localsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/null_check_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check ATB file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "CREATE TABLE #Check_atb_files (column_1 VARCHAR(MAX) NOT NULL)\n\nDECLARE @filename VARCHAR(50)\n\nSELECT @filename=CONCAT('Account_', MONTH(GETDATE()-1),'.',DAY(GETDATE()-1),'.',YEAR(GETDATE()-1),'.txt')\n\nEXEC('BULK Insert #Check_atb_files From ''C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\Task_7\\'+@filename+'''\n        With (FIRSTROW =2,  rowterminator = ''\\n'');');\nSELECT*\nFROM #Check_atb_files\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Check TxnChar file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "CREATE TABLE #Check_txn_char_files (column_1 VARCHAR(MAX) NOT NULL)\n\nDECLARE @filenametxn VARCHAR(50)\n\nSELECT @filenametxn=CONCAT('Transaction-Charge__', MONTH(GETDATE()-1),'.', DAY(GETDATE()-1),'.',YEAR(Getdate()-1),'.txt')\n\nEXEC('BULK Insert #Check_txn_char_files From ''C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\Task_7\\'+@filenametxn+'''\n        With (FIRSTROW =2,  rowterminator = ''\\n'');');\n\t\t\nSELECT *\nFROM #Check_txn_char_files\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/orch-unstatic-extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Create",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Create]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "unstatic-extract_lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Update]",
							"storedProcedureParameters": {
								"Description": {
									"value": {
										"value": "@variables('PipelineExecDescription')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@variables('PipelineExecStatus')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "unstatic-extract",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SP Create",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "unstatic-extract",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "unstatic-extract_lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "unstatic-extract",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "unstatic-extract_lookup",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Fail unstatic-extract",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "unstatic-extract",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Pipeline unstatic-extract Failed",
							"errorCode": "101"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"PipelineExecDescription": {
						"type": "String",
						"defaultValue": "succeed"
					},
					"PipelineExecStatus": {
						"type": "String",
						"defaultValue": "succeed"
					}
				},
				"folder": {
					"name": "unstatistic"
				},
				"annotations": [
					"extract"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]",
				"[concat(variables('factoryId'), '/pipelines/unstatic-extract')]",
				"[concat(variables('factoryId'), '/pipelines/unstatic-extract_lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT 'newttestserver-firstdbtest-key' AS 'secretkey','dbo' AS schema_tabName, 'test1' AS tablename\nUNION ALL\nSELECT 'newtwotestswerver-seconddbtest-key' AS 'secretkey','dbo' AS schema_tabName , 'test2' AS tablename",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": {
												"value": "@{item().tablename}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(activity('Lookup1_copy1').output.firstrow.json_output)\n",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "src_csv_new",
											"type": "DatasetReference",
											"parameters": {
												"Container": "unstaticcontapp",
												"FileName": "new.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable3",
											"type": "DatasetReference",
											"parameters": {
												"secur_key": {
													"value": "@item().secretkey",
													"type": "Expression"
												},
												"table_schema": {
													"value": "@item().schema_tabName",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Lookup1_copy1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[sp_getColumnMapping]",
											"storedProcedureParameters": {
												"schema_name": {
													"type": "String",
													"value": {
														"value": "@item().schema_tabName",
														"type": "Expression"
													}
												},
												"table_name": {
													"type": "String",
													"value": {
														"value": "@item().tablename",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_test",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_csv_new",
								"type": "DatasetReference",
								"parameters": {
									"Container": "unstaticcontapp",
									"FileName": "new.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_with_filemeta')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "src_csv_new",
								"type": "DatasetReference",
								"parameters": {
									"Container": "forkgnd",
									"FileName": "metafile.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup1_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": {
												"value": "@{item().tablename}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(activity('Lookup1_copy1').output.firstrow.json_output)\n",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "src_csv_new",
											"type": "DatasetReference",
											"parameters": {
												"Container": "unstaticcontapp",
												"FileName": "new.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable3",
											"type": "DatasetReference",
											"parameters": {
												"secur_key": {
													"value": "@item().secretkey",
													"type": "Expression"
												},
												"table_schema": {
													"value": "@item().schema_tabName",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().tablename",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Lookup1_copy1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[sp_getColumnMapping]",
											"storedProcedureParameters": {
												"schema_name": {
													"type": "String",
													"value": {
														"value": "@item().schema_tabName",
														"type": "Expression"
													}
												},
												"table_name": {
													"type": "String",
													"value": {
														"value": "@item().tablename",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "dst_sql_test",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable3')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/second_Transform_Atb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transform Atb data ",
				"activities": [
					{
						"name": "Insert to cvtATB",
						"description": "Use [dbo].[usp_ConvLoad_cvtATB]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_ConvLoad_cvtATB]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 1",
						"description": "Send mail about Fail Insert to cvtATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert to cvtATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED. ATB data wasn't inserted to cvt Table. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update Timelines from ATB",
						"description": "Use usp_Update_All_Timelines  for update Timelines dictionary",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Dictionaries from ATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Update_All_Timelines]",
							"storedProcedureParameters": {
								"Tbl": {
									"value": "cvtATB",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 3",
						"description": "Send mail about Fail update Timelines from ATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update Timelines from ATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating Timelines from ATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update Dictionaries from ATB",
						"description": "Use [dbo].[usp_Update_All_Dictionaries] for update Dictionaries from ATB",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Insert to cvtATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Update_All_Dictionaries]",
							"storedProcedureParameters": {
								"Tbl": {
									"value": "cvtATB",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 2",
						"description": "Send mail about Fail update Dictionaries  from ATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update Dictionaries from ATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.   Updating Dictionaries from ATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update cvtATB",
						"description": "Update cvtATB according to dictionaries \nuse [dbo].[usp_ConvModify_ATB]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Timelines from ATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_ConvModify_ATB]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 4",
						"description": "Send mail about Fail update cvtATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update cvtATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating cvtATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update RetainZero in cvtATB",
						"description": "Update RetainZero in cvtATB use [dbo].[usp_Dimension_Retain_Zero]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update cvtATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Dimension_Retain_Zero]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 5",
						"description": "Send mail about Fail update RetainZero \n in cvtATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update RetainZero in cvtATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating RetainZero in cvtATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update RetainZero in cvtATB step2",
						"description": "Update RetainZero in cvtATB use  [dbo].[usp_Retain_Zero] for CurrentBalance=0 ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update RetainZero in cvtATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Retain_Zero]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 6",
						"description": "Send mail about Fail update RetainZero for CurrentBalance=0 ",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update RetainZero in cvtATB step2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating RetainZero in cvtATB was FAILED for CurrentBalance=0 . This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update Age by Dates in cvtATB",
						"description": "Update Age by Dates in cvtATB use  [dbo].[usp_UpdateAge_ATB]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update RetainZero in cvtATB step2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_UpdateAge_ATB]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 7",
						"description": "Send mail about Fail update  Age by Dates in cvtATB ",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update Age by Dates in cvtATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating  Age by Dates in cvtATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Create tblATB and switch from cvtATB",
						"description": "Create tblATB and switch from cvtATB use [dbo].[usp_Deploy_ATB]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Age by Dates in cvtATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Deploy_ATB]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 8",
						"description": "Send mail about Fail Create tblATB and switch from cvtATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Create tblATB and switch from cvtATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Creating tblATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Create views for ATB",
						"description": "Create or recreate views for ATB use [dbo].[usp_Recreate_vwATB]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create tblATB and switch from cvtATB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Recreate_vwATB]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 9",
						"description": "Send mail about Fail Create views for ATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Create views for ATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Creating views for ATB was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "alina_parkhomenko@epam.com"
					},
					"TBL": {
						"type": "string",
						"defaultValue": "cvtATB"
					}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/localsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/third_Transform_TXNS_CHGS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Transform TXNS_CHGS data ",
				"activities": [
					{
						"name": "Insert to cvtTXNS_CHGS",
						"description": "Use [dbo].[usp_ConvLoad_cvtTXNS_CHGS]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_ConvLoad_cvtTXNS_CHGS]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 1",
						"description": "Send mail about Fail Insert to  cvtTXNS_CHGS ",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert to cvtTXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED. TXNS_CHGS data wasn't inserted to cvtTXNS_CHGS. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update Timelines from TXNS_CHGS",
						"description": "Use usp_Update_All_Timelines  for update Timelines ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Dictionaries from cvtTXNS_CHGS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Update_All_Timelines]",
							"storedProcedureParameters": {
								"Tbl": {
									"value": "cvtTXNS_CHGS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 3",
						"description": "Send mail about Fail update Timelines from TXNS_CHGS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update Timelines from TXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating Timelines from TXNS_CHGS was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update Dictionaries from cvtTXNS_CHGS",
						"description": "Use [dbo].[usp_Update_All_Dictionaries] for update Dictionaries from cvtTXNS_CHGS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Insert to cvtTXNS_CHGS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Update_All_Dictionaries]",
							"storedProcedureParameters": {
								"Tbl": {
									"value": "cvtTXNS_CHGS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 2",
						"description": "Send mail about Fail update Dictionaries  from TXNS_CHGS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update Dictionaries from cvtTXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.   Updating Dictionaries from TXNS_CHGS was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Update cvtTXNS_CHGS",
						"description": "Update cvtTXNS_CHGS according to dictionaries use [dbo].[usp_ConvModify_TXNS_CHGS]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update Timelines from TXNS_CHGS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_ConvModify_TXNS_CHGS]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 8",
						"description": "Send mail about Fail Create tblTXNS_CHSS use [dbo].[usp_Deploy_TXNS_CHSS]\nand switch from cvtTXNS_CHSS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Create tblTXNS_CHGS and switch from cvtTXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Creating tblTXNS_CHSS was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Create tblTXNS_CHGS and switch from cvtTXNS_CHGS",
						"description": "Create tblTXNS_CHGS and switch from cvtTXNS_CHGS use [dbo].[usp_Deploy_TXNS_CHSS]",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update cvtTXNS_CHGS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_Deploy_TXNS_CHSS]"
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Fail 4",
						"description": "Send mail about Fail update cvtTXNS_CHGS",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Update cvtTXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL process was FAILED.  Updating cvtTXNS_CHGS was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "alina_parkhomenko@epam.com"
					},
					"TBL": {
						"type": "string",
						"defaultValue": "cvtTXNS_CHGS"
					}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/localsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatic-extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy to Sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP Create",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [dbo].[test];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountSuffix",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountSuffix",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EMPINumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMPINumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FacilityID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FacilityID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ServiceDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ServiceDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AdmitDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AdmitDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DischargeDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DischargeDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FinalBillDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FinalBillDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TxnInsurancePlan",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TxnInsurancePlan",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TxnFinancialClass",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TxnFinancialClass",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HTRID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "HTRID",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_csv_new",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_sql_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SP Create",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Create]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy to Sql",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Set variable Status",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Update]",
							"storedProcedureParameters": {
								"Description": {
									"value": {
										"value": "@variables('PipelineExecDescription')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@variables('PipelineExecStatus')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable Description",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "copy to Sql",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineExecDescription",
							"value": {
								"value": "@activity('copy to Sql').error.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Description",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineExecStatus",
							"value": "Failed"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"PipelineExecDescription": {
						"type": "String",
						"defaultValue": "succeed"
					},
					"PipelineExecStatus": {
						"type": "String",
						"defaultValue": "succeed"
					}
				},
				"folder": {
					"name": "unstatistic"
				},
				"annotations": [
					"extract"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_test')]",
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatic-extract_automap')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy to Sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [dbo].[test3];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"value": "@json(activity('Lookup1').output.firstRow.json_output)",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "src_csv_new",
								"type": "DatasetReference",
								"parameters": {
									"Container": "unstaticcontapp",
									"FileName": "new.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_sql_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_getColumnMapping]",
								"storedProcedureParameters": {
									"schema_name": {
										"type": "String",
										"value": "dbo"
									},
									"table_name": {
										"type": "String",
										"value": "test3"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [
					"extract"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatic-extract_automap_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy to Sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [dbo].[test3];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"value": "@json(activity('Lookup1').output.firstRow.json_output)",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "src_csv_new",
								"type": "DatasetReference",
								"parameters": {
									"Container": "unstaticcontapp",
									"FileName": "new.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_sql_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_getColumnMapping]",
								"storedProcedureParameters": {
									"schema_name": {
										"type": "String",
										"value": "dbo"
									},
									"table_name": {
										"type": "String",
										"value": "test3"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [
					"extract"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatic-extract_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy to Sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SP Create",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountSuffix",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountSuffix",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EMPINumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EMPINumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FacilityID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FacilityID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ServiceDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ServiceDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AdmitDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AdmitDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DischargeDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DischargeDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FinalBillDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FinalBillDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TxnInsurancePlan",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TxnInsurancePlan",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TxnFinancialClass",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TxnFinancialClass",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HTRID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "HTRID",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_csv_new",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_sql_test",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SP Create",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Create]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set variable Status",
								"dependencyConditions": [
									"Succeeded",
									"Skipped"
								]
							},
							{
								"activity": "Lookup_FileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Update]",
							"storedProcedureParameters": {
								"Description": {
									"value": {
										"value": "@variables('PipelineExecDescription')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@variables('PipelineExecStatus')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable Description",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "copy to Sql",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineExecDescription",
							"value": {
								"value": "@activity('copy to Sql').error.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable Status",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable Description",
								"dependencyConditions": [
									"Succeeded",
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineExecStatus",
							"value": "Failed"
						}
					},
					{
						"name": "Lookup_FileName",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "copy to Sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@replace('Update [dbo].[test2] \nSET [Filename] =''variablefilename''\nwhere [Filename] IS NULL\nSelect 1;'\n,'variablefilename'\n,pipeline().parameters.FileName\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dsr_sql_dummy2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "unstaticcontapp"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "new.csv"
					}
				},
				"variables": {
					"PipelineExecDescription": {
						"type": "String",
						"defaultValue": "succeed"
					},
					"PipelineExecStatus": {
						"type": "String",
						"defaultValue": "succeed"
					}
				},
				"folder": {
					"name": "unstatistic"
				},
				"annotations": [
					"extract"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_csv_new')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_test')]",
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]",
				"[concat(variables('factoryId'), '/datasets/dsr_sql_dummy2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticdbaparklinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Code",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "InsertDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dicCoder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "testkeyAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretkey": {
							"value": "@dataset().secretKey_look",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DBName_look": {
						"type": "String"
					},
					"ServerName_look": {
						"type": "String"
					},
					"secretKey_look": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/testkeyAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "testkeyAzureSqlDatabase",
					"type": "LinkedServiceReference",
					"parameters": {
						"secretkey": {
							"value": "@dataset().secur_key",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"secur_key": {
						"type": "String"
					},
					"table_schema": {
						"type": "String"
					},
					"table_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().table_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/testkeyAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_ov9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticdbaparklinkedservice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticuploadapp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test.Parquet",
						"container": "unstaticcontapp"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticuploadapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_ov9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "localsqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/localsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "localsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "FileHandle",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "PostDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PostDate_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FormatFileName",
						"type": "varchar"
					},
					{
						"name": "FormatFilePath",
						"type": "varchar"
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "RawFileName",
						"type": "varchar"
					},
					{
						"name": "FilePath",
						"type": "varchar"
					},
					{
						"name": "AmountColumn",
						"type": "varchar"
					},
					{
						"name": "FirstRows",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "ClearTable",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Check_Existence",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cfgSubmissionInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/localsqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsr_sql_dummy2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticdbaparklinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_sql_dummy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticdbaparklinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Filename",
						"type": "varchar"
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "AccountSuffix",
						"type": "varchar"
					},
					{
						"name": "EMPINumber",
						"type": "varchar"
					},
					{
						"name": "FacilityID",
						"type": "varchar"
					},
					{
						"name": "ServiceDate",
						"type": "varchar"
					},
					{
						"name": "AdmitDate",
						"type": "varchar"
					},
					{
						"name": "DischargeDate",
						"type": "varchar"
					},
					{
						"name": "FinalBillDate",
						"type": "varchar"
					},
					{
						"name": "TxnInsurancePlan",
						"type": "varchar"
					},
					{
						"name": "TxnFinancialClass",
						"type": "varchar"
					},
					{
						"name": "HTRID",
						"type": "varchar"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_sql_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticdbaparklinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Filename",
						"type": "varchar"
					},
					{
						"name": "AccountNumber",
						"type": "varchar"
					},
					{
						"name": "AccountSuffix",
						"type": "varchar"
					},
					{
						"name": "EMPINumber",
						"type": "varchar"
					},
					{
						"name": "FacilityID",
						"type": "varchar"
					},
					{
						"name": "ServiceDate",
						"type": "varchar"
					},
					{
						"name": "AdmitDate",
						"type": "varchar"
					},
					{
						"name": "DischargeDate",
						"type": "varchar"
					},
					{
						"name": "FinalBillDate",
						"type": "varchar"
					},
					{
						"name": "TxnInsurancePlan",
						"type": "varchar"
					},
					{
						"name": "TxnFinancialClass",
						"type": "varchar"
					},
					{
						"name": "HTRID",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/modulename_tableName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticdbaparklinkedservice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "meta",
					"table": "etl_nfield_databases"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticdbaparklinkedservice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_csv_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticuploadapp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "unstaticcontapp"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "new.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "AccountSuffix",
						"type": "String"
					},
					{
						"name": "EMPINumber",
						"type": "String"
					},
					{
						"name": "FacilityID",
						"type": "String"
					},
					{
						"name": "ServiceDate",
						"type": "String"
					},
					{
						"name": "AdmitDate",
						"type": "String"
					},
					{
						"name": "DischargeDate",
						"type": "String"
					},
					{
						"name": "FinalBillDate",
						"type": "String"
					},
					{
						"name": "TxnInsurancePlan",
						"type": "String"
					},
					{
						"name": "TxnFinancialClass",
						"type": "String"
					},
					{
						"name": "HTRID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticuploadapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "unstatistic_key",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('AzureSqlDatabase_keyvault_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatistic_key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('FileServer1_properties_typeProperties_host')]",
					"userId": "[parameters('FileServer1_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('FileServer1_password')]"
					}
				},
				"connectVia": {
					"referenceName": "localdb",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/localdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/localsqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('localsqldb_connectionString')]"
				},
				"connectVia": {
					"referenceName": "localdb",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/localdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testkeyAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"secretkey": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "unstatistic_key",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('testkeyAzureSqlDatabase_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatistic_key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatistic_key')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('unstatistic_key_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatisticdbaparklinkedservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('unstatisticdbaparklinkedservice_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unstatisticuploadapp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('unstatisticuploadapp_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/first_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "First_Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-27T14:07:00",
						"timeZone": "FLE Standard Time",
						"schedule": {
							"hours": [
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/First_Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-06-07T13:56:00",
						"timeZone": "FLE Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/localdb')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_meta_etl_nfield_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticuploadapp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "meta_etl_nfield_databases.Parquet",
						"container": "unqmetaetl"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticuploadapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_meta_etl_nfield_databases')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_meta_etl_nfield_databases",
						"description": "Copy table [meta].[etl_nfield_databases] to file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "modulename_tableName",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "file_meta_etl_nfield_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/modulename_tableName')]",
				"[concat(variables('factoryId'), '/datasets/file_meta_etl_nfield_metadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_synd_poc_dev_sql2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"pram_gbl_secret_key": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "unstatistic_key",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('lnk_synd_poc_dev_sql2_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatistic_key')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_upload_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup2').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@item().Query",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "synd_poc_dev_sql_meta",
											"type": "DatasetReference",
											"parameters": {
												"secretname": {
													"value": "@item().secretname",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet2",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@concat(item().filename,'.parquet')",
													"type": "Expression"
												},
												"container_name": {
													"value": "@item().container_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n\tt1.[Query] AS Query, t2.name AS secretname, concat(t2.name, '_',t1.ID) AS filename, LOWER(t2.name ) AS container_name\nFROM [meta].[etl_nfield_metadata] t1\n\nLEFT JOIN [meta].[etl_nfield_databases] t2\n\t\t\tON t1.IsEnabled=t2.IsEnabled\n\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "synd_poc_dev_sql_meta",
								"type": "DatasetReference",
								"parameters": {
									"secretname": "Nfield-US"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/synd_poc_dev_sql_meta')]",
				"[concat(variables('factoryId'), '/datasets/Parquet2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/synd_poc_dev_sql_meta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_synd_poc_dev_sql2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pram_gbl_secret_key": {
							"value": "@dataset().secretname",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"secretname": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "meta",
					"table": "etl_nfield_etl_nfield_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_synd_poc_dev_sql2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticuploadapp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "String"
					},
					"container_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container_name",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticuploadapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_upload_files_dataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_databases",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select * From [meta].[etl_nfield_databases]\nwhere IsEnabled=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_meta_databases",
								"type": "DatasetReference",
								"parameters": {
									"Name": {
										"value": "@pipeline().parameters.Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "lp_fe_databases",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_databases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_databases').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Ex_pipelin_t1_pipeline_upload_files_tables",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pipeline_upload_files_tables",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Name": {
												"value": "@item().Name",
												"type": "Expression"
											},
											"Container": {
												"value": "@item().Container",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Name": {
						"type": "string",
						"defaultValue": "Nfield-US"
					}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_meta_databases')]",
				"[concat(variables('factoryId'), '/pipelines/pipeline_upload_files_tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_upload_files_tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select *, Getdate() as filedate from meta.etl_nfield_metadata where  IsEnabled=1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_meta_metadata",
								"type": "DatasetReference",
								"parameters": {
									"Name": {
										"value": "@pipeline().parameters.Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "lp_fe_copy_data",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_metadata').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copy_data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@item().Query",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_meta_metadata",
											"type": "DatasetReference",
											"parameters": {
												"Name": {
													"value": "@pipeline().parameters.Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "filename",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@item().Entity",
													"type": "Expression"
												},
												"filename": {
													"value": "@string(concat(item().filedate,'.parquet'))",
													"type": "Expression"
												},
												"Container": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Name": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "for KGND"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_meta_metadata')]",
				"[concat(variables('factoryId'), '/datasets/filename')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filename')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "unstatisticuploadapp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					},
					"Container": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/unstatisticuploadapp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_meta_databases')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_synd_poc_dev_sql2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pram_gbl_secret_key": {
							"value": "@dataset().Name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "meta",
					"table": "etl_nfield_databases"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_synd_poc_dev_sql2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_meta_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_synd_poc_dev_sql2",
					"type": "LinkedServiceReference",
					"parameters": {
						"pram_gbl_secret_key": {
							"value": "@dataset().Name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "meta",
					"table": "etl_nfield_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_synd_poc_dev_sql2')]"
			]
		}
	]
}