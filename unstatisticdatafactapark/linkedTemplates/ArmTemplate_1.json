{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "unstatisticdatafactapark"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "localsqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "FileHandle",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "PostDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PostDate_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FormatFileName",
						"type": "varchar"
					},
					{
						"name": "FormatFilePath",
						"type": "varchar"
					},
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "RawFileName",
						"type": "varchar"
					},
					{
						"name": "FilePath",
						"type": "varchar"
					},
					{
						"name": "AmountColumn",
						"type": "varchar"
					},
					{
						"name": "FirstRows",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "ClearTable",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Check_Existence",
						"type": "tinyint",
						"precision": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cfgSubmissionInfo"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/First_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_ov9",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_ov9",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "dbo.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "dbo.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_ov9",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_ov9",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().destination.table"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "dicAdmitSource"
								},
								"destination": {
									"table": "dicAdmitSource"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicAgebyAdmitDate"
								},
								"destination": {
									"table": "dicAgebyAdmitDate"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Group1_ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "Group1_ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Group1",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Group1",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "MinValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MinValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "MaxValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MaxValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicAgebyDischargeDate"
								},
								"destination": {
									"table": "dicAgebyDischargeDate"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Group1_ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "Group1_ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Group1",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Group1",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "MinValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MinValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "MaxValue",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "MaxValue",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicBillHold"
								},
								"destination": {
									"table": "dicBillHold"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "dicCoder"
								},
								"destination": {
									"table": "dicCoder"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "ID",
													"type": "Int32",
													"physicalType": "int"
												},
												"sink": {
													"name": "ID",
													"type": "Int32"
												}
											},
											{
												"source": {
													"name": "Code",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Code",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "Description",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Description",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "InsertDateTime",
													"type": "DateTime",
													"physicalType": "datetime"
												},
												"sink": {
													"name": "InsertDateTime",
													"type": "DateTime"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/first_Bulk_insert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Bulk insert for Atb",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Lookup for Atb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_BULK]",
							"storedProcedureParameters": {
								"AmountColumn": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.AmountColumn",
										"type": "Expression"
									},
									"type": "String"
								},
								"Check_Existence": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.Check_Existence",
										"type": "Expression"
									},
									"type": "Byte[]"
								},
								"ClearTable": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.ClearTable",
										"type": "Expression"
									},
									"type": "Byte[]"
								},
								"FileHandle": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.ClearTable",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"FirstRow": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.FirstRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"FormatFileName": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.FormatFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"FormatFilePath": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.FormatFilePath",
										"type": "Expression"
									},
									"type": "String"
								},
								"PostDate": {
									"value": {
										"value": "@string(activity('Lookup for Atb').output.firstRow.PostDate_ID)",
										"type": "Expression"
									},
									"type": "String"
								},
								"RawFileName": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.RawFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RawFilePath": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.FilePath",
										"type": "Expression"
									},
									"type": "String"
								},
								"RawTableName": {
									"value": {
										"value": "@activity('Lookup for Atb').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup for Atb",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Send mail about Successed 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT *\r\nFROM [dbo].[cfgSubmissionInfo] \r\nWHERE [FileHandle]=1\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Insert to cfgSubmissionInfo",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH datefield AS (\nSELECT GETDATE()-1 AS PD,\n    FORMAT((GETDATE()-1), 'yyyyMMdd', 'en-us') AS PD_ID\n    )\n\nINSERT INTO [dbo].[cfgSubmissionInfo] ( \n        [FileHandle]\n        ,[PostDate]\n        ,[PostDate_ID]\n        ,[FormatFileName]\n        ,[FormatFilePath]\n        ,[TableName]\n        ,[RawFileName]\n        ,[FilePath]\n        ,[AmountColumn]\n        ,[FirstRows]\n    )\nSELECT \n    1 AS FileHandle,\n    PD AS PostDate,\n    PD_ID AS PostDate_ID,\n    'formatF_7.txt' AS FormatFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS FormatFilePath,\n    '_rawATB' AS TableName,\n    CONCAT('Account_',MONTH(PD),'.',DAY(PD),'.',YEAR(PD),'.txt') AS RawFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS rawFilePath,\n    'CurrentBalance' AS AmountColumn,\n    2 AS FirstRows\nFROM datefield\nUNION ALL\nSELECT \n    2 AS FileHandle,\n    PD AS PostDate,\n    PD_ID AS PostDate_ID  ,\n    'formatF_7_txn_chr.txt' AS  FormatFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS FormatFilePath,\n    '_rawTXNS_CHGS' AS TableName,\n    CONCAT('Transaction-Charge__',MONTH(PD),'.',DAY(PD),'.',YEAR(PD),'.txt') AS RawFileName,\n    'C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\TASk_7' AS rawFilePath,\n    'TxnAmount' AS AmountColumn,\n    2 AS FirstRows\nFROM datefield;\n\n"
								}
							]
						}
					},
					{
						"name": "Lookup for TxnChar",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Send mail about Successed 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT *\r\nFROM [dbo].[cfgSubmissionInfo] \r\nWHERE [FileHandle]=2\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Bulk insert for TxnChar",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Lookup for TxnChar",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_BULK]",
							"storedProcedureParameters": {
								"AmountColumn": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.AmountColumn",
										"type": "Expression"
									},
									"type": "String"
								},
								"Check_Existence": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.Check_Existence",
										"type": "Expression"
									},
									"type": "Byte[]"
								},
								"ClearTable": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.ClearTable",
										"type": "Expression"
									},
									"type": "Byte[]"
								},
								"FileHandle": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.ClearTable",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"FirstRow": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.FirstRows",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"FormatFileName": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.FormatFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"FormatFilePath": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.FormatFilePath",
										"type": "Expression"
									},
									"type": "String"
								},
								"PostDate": {
									"value": {
										"value": "@string(activity('Lookup for TxnChar').output.firstRow.PostDate_ID)",
										"type": "Expression"
									},
									"type": "String"
								},
								"RawFileName": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.RawFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"RawFilePath": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.FilePath",
										"type": "Expression"
									},
									"type": "String"
								},
								"RawTableName": {
									"value": {
										"value": "@activity('Lookup for TxnChar').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send mail about Successed 1",
						"description": "Send mail about Successed Insert to cfgSubmissionInfo and started ETL Process.",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert to cfgSubmissionInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL Process was started. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Fail 1",
						"description": "Send mail about Fail Insert to cfgSubmissionInfo",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Insert to cfgSubmissionInfo",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "This object was added earlier. ETL process didn't start. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Fail 2",
						"description": "Send mail about \"Fail\" Bulk insert procedure for Atb data",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Bulk insert for Atb",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Bulk insert procedure for Atb data was FAILED. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Fail 3",
						"description": "Send mail about \"Fail\" Bulk insert procedure for TxnChar data",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Bulk insert for TxnChar",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Bulk insert procedure for TxnChar data was FAILED.  This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "alina_parkhomenko@epam.com"
					}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/null_check_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check ATB file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "CREATE TABLE #Check_atb_files (column_1 VARCHAR(MAX) NOT NULL)\n\nDECLARE @filename VARCHAR(50)\n\nSELECT @filename=CONCAT('Account_', MONTH(GETDATE()-1),'.',DAY(GETDATE()-1),'.',YEAR(GETDATE()-1),'.txt')\n\nEXEC('BULK Insert #Check_atb_files From ''C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\Task_7\\'+@filename+'''\n        With (FIRSTROW =2,  rowterminator = ''\\n'');');\nSELECT*\nFROM #Check_atb_files\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Check TxnChar file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "CREATE TABLE #Check_txn_char_files (column_1 VARCHAR(MAX) NOT NULL)\n\nDECLARE @filenametxn VARCHAR(50)\n\nSELECT @filenametxn=CONCAT('Transaction-Charge__', MONTH(GETDATE()-1),'.', DAY(GETDATE()-1),'.',YEAR(Getdate()-1),'.txt')\n\nEXEC('BULK Insert #Check_txn_char_files From ''C:\\Users\\Alina_Parkhomenko\\Desktop\\study\\BI__\\Task_7\\'+@filenametxn+'''\n        With (FIRSTROW =2,  rowterminator = ''\\n'');');\n\t\t\nSELECT *\nFROM #Check_txn_char_files\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/orch-unstatic-extract')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Create",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Create]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "unstatic-extract_lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[pipelineExecutiHistiry_Update]",
							"storedProcedureParameters": {
								"Description": {
									"value": {
										"value": "@variables('PipelineExecDescription')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "@variables('PipelineExecStatus')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "unstatisticdbaparklinkedservice",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "unstatic-extract",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "SP Create",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "unstatic-extract",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "unstatic-extract_lookup",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "unstatic-extract",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "unstatic-extract_lookup",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Fail unstatic-extract",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "unstatic-extract",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Pipeline unstatic-extract Failed",
							"errorCode": "101"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"PipelineExecDescription": {
						"type": "String",
						"defaultValue": "succeed"
					},
					"PipelineExecStatus": {
						"type": "String",
						"defaultValue": "succeed"
					}
				},
				"folder": {
					"name": "unstatistic"
				},
				"annotations": [
					"extract"
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Bulk Insert",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Files on the folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "first_Bulk_insert",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline Transform ATB",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Bulk Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "second_Transform_Atb",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline Transform TXNS_CHGS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Bulk Insert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "third_Transform_TXNS_CHGS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Cleaning cfgSubmissionInfo table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Transform ATB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Pipeline Transform TXNS_CHGS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM [dbo].[cfgSubmissionInfo] "
								}
							]
						}
					},
					{
						"name": "Send mail about Successed 1",
						"description": "Send mail about Successed ETL Process.",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Cleaning cfgSubmissionInfo table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "ETL Process was Succeed.  This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Failed 2",
						"description": "Send mail about Failed ETL Process for TXNS_CHGS.",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Transform TXNS_CHGS",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\"message\":ETL Process was Failed for TXNS_CHGS. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\"dataFactoryName\":\"@{pipeline().DataFactory}\",\"pipelineName\":\"@{pipeline().Pipeline}\",\"receiver\":\"@{pipeline().parameters.receiver}\"}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Backup after loading",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Send mail about Successed 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_backup]",
							"storedProcedureParameters": {
								"Backup_path": {
									"value": "C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\",
									"type": "String"
								},
								"bakup_file": {
									"value": ",bak_1.bak,bak_2.bak,bak_3.bak",
									"type": "String"
								},
								"DB_name": {
									"value": "mfv40_AlinaParkhormenko",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "localsqldb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Execute Files on the folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "null_check_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send mail about Failed",
						"description": "Send mail about absent files on the folder",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Files on the folder",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"message": "Absent FILES on the folder. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					},
					{
						"name": "Send mail about Failed 3",
						"description": "Send mail about Failed ETL Process. for ATB",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Transform ATB",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-36.northeurope.logic.azure.com:443/workflows/5e14d7532c934efb967b64d4eb6b97f9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=t_y49xgm25kdUxJeG10AAWU4nZDTCzeT6rbcRlnKpGQ",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\"message\":ETL Process was Failed for ATB. This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\"dataFactoryName\":\"@{pipeline().DataFactory}\",\"pipelineName\":\"@{pipeline().Pipeline}\",\"receiver\":\"@{pipeline().parameters.receiver}\"}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "alina_parkhomenko@epam.com"
					}
				},
				"folder": {
					"name": "ETL"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/first_Bulk_insert')]",
				"[concat(variables('factoryId'), '/pipelines/null_check_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/first_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "First_Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-27T14:07:00",
						"timeZone": "FLE Standard Time",
						"schedule": {
							"hours": [
								15
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/First_Pipeline')]"
			]
		}
	]
}